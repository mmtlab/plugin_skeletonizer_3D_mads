#   ____  _             _       
#  |  _ \| |_   _  __ _(_)_ __  
#  | |_) | | | | |/ _` | | '_ \ 
#  |  __/| | |_| | (_| | | | | |
#  |_|   |_|\__,_|\__, |_|_| |_|
#                 |___/         
# A Template for HpePlugin, a Source Plugin
# Generated by the command: plugin -t source -d hpe_plugin hpe
# Hostname: raspberrypi
# Current working directory: /home/mads/develop
# Creation date: 2024-10-30T09:02:42.217+0100
# NOTICE: MADS Version 1.2.0
cmake_minimum_required(VERSION 3.20)
project(hpe VERSION 1.2.0 LANGUAGES C CXX)
if(CMAKE_BUILD_TYPE STREQUAL "")
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build." FORCE)
endif()
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set_property(CACHE CMAKE_INSTALL_PREFIX PROPERTY VALUE "/usr/local")
endif()
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}") 

# PROJECT SETTINGS #############################################################
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(USR_DIR ${CMAKE_CURRENT_LIST_DIR}/usr)
set(SRC_DIR ${CMAKE_CURRENT_LIST_DIR}/src)
set(CMAKE_INSTALL_PREFIX ${USR_DIR})
set(FETCHCONTENT_QUIET OFF)
if (UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
endif()
option(SKIP_KINECT_AZURE "Do not use Kinect Azure cameras" OFF)

if(UNIX AND NOT APPLE)
  target_compile_definitions(hpe PRIVATE __linux)
  target_compile_definitions(hpe_main PRIVATE __linux)
  set(LINUX TRUE)
endif()

# DEPENDENCIES #################################################################
if(WIN32)
  # On Windows, we rely on env variables to find install paths
  if(NOT DEFINED ENV{OpenCV_DIR})
    message(FATAL_ERROR "OpenCV_DIR env var not set, please set it to the OpenCV install directory")
  endif()
  set(OpenCV_DIR "$ENV{OpenCV_DIR}\\build" CACHE PATH "OpenCV build directory" FORCE)
  if(NOT DEFINED ENV{OpenVINO_DIR})
    message(FATAL_ERROR "OpenVINO_DIR env var not set, please set it to the OpenVINO install directory")
  endif()
  set(OpenVINO_DIR "$ENV{OpenVINO_DIR}\\runtime\\cmake" CACHE PATH "OpenVINO install directory" FORCE)
endif()

find_package(OpenCV REQUIRED COMPONENTS core highgui videoio imgproc imgcodecs)
find_package(OpenVINO REQUIRED COMPONENTS Runtime)

if(WIN32)
  # OpenVINO headers have to be manually found on Windows
  set(OPENVINO_INCLUDE_DIR "$ENV{OpenVINO_DIR}\\runtime\\include")
else()
  find_path(OPENVINO_INCLUDE_DIR NAMES openvino.hpp 
    PATHS /opt/intel/openvino_2024.4.0/runtime/include
    PATH_SUFFIXES openvino
  )
  cmake_path(GET OPENVINO_INCLUDE_DIR PARENT_PATH OPENVINO_INCLUDE_DIR)
endif()
if (NOT OPENVINO_INCLUDE_DIR)
  message(FATAL_ERROR "OpenVINO not found")
else()
  message(STATUS "OpenVINO headers found at ${OPENVINO_INCLUDE_DIR}")
endif()


# Add VTK package
find_package(VTK REQUIRED)
find_package(MPI REQUIRED)

find_package(PCL 1.13 REQUIRED)

find_package(PkgConfig REQUIRED)

include(FetchContent)

# pugg is for the plugin system
FetchContent_Declare(pugg 
  GIT_REPOSITORY https://github.com/pbosetti/pugg.git
  GIT_TAG        1.0.2
  GIT_SHALLOW    TRUE
)

# plugins deal with I/O as JSON objects
set(BUILD_TESTING OFF CACHE INTERNAL "")
set(JSON_BuildTests OFF CACHE INTERNAL "")
FetchContent_Declare(json
  GIT_REPOSITORY https://github.com/nlohmann/json.git
  GIT_TAG        v3.11.3
  GIT_SHALLOW    TRUE
)

FetchContent_Declare(eigen
  GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
  GIT_TAG 3.4.0
  GIT_SHALLOW TRUE
)

FetchContent_Declare(plugin 
  GIT_REPOSITORY https://github.com/pbosetti/mads_plugin.git
  GIT_TAG        HEAD
  GIT_SHALLOW    TRUE
)

FetchContent_MakeAvailable(pugg json eigen)
FetchContent_Populate(plugin)

include_directories(
  ${OpenCV_INCLUDE_DIRS}
  ${OPENVINO_INCLUDE_DIR}
  ${PCL_INCLUDE_DIRS}
  ${json_SOURCE_DIR}/include
  ${plugin_SOURCE_DIR}/src
)


if (UNIX)
# LCCV
  FetchContent_Declare(LCCV
    GIT_REPOSITORY https://github.com/pbosetti/LCCV.git
    GIT_TAG        HEAD
    GIT_SHALLOW    TRUE
  )
  FetchContent_MakeAvailable(LCCV)
  include_directories(${lccv_SOURCE_DIR}/include)
# LibCamera
  pkg_check_modules(LIBCAMERA REQUIRED libcamera)
  if (LIBCAMERA_FOUND)
    include_directories(${LIBCAMERA_INCLUDE_DIRS})
  endif()
endif()


# MACROS #######################################################################
# Call: add_plugin(name [SRCS src1 src2 ...] [LIBS lib1 lib2 ...])
#       the source file ${SRC_DIR}/plugin/<name>.cpp is implicitly added
macro(add_plugin name)
  # on MacOS only, plugins can be compiled as executables
  set(multiValueArgs LIBS SRCS)
  cmake_parse_arguments(plugin "" "" "${multiValueArgs}" ${ARGN})
  if (APPLE)
    add_executable(${name} ${SRC_DIR}/${name}.cpp ${plugin_SRCS})
    set_target_properties(${name} PROPERTIES ENABLE_EXPORTS TRUE)
    set(${name}_EXEC ${name}.plugin)
  else()
    add_library(${name} SHARED ${SRC_DIR}/${name}.cpp ${plugin_SRCS})
    add_executable(${name}_main ${SRC_DIR}/${name}.cpp ${plugin_SRCS})
    target_link_libraries(${name}_main PRIVATE pugg ${plugin_LIBS})
    set_target_properties(${name}_main PROPERTIES OUTPUT_NAME ${name})
    set(${name}_EXEC ${name})
    list(APPEND TARGET_LIST ${name}_main)
  endif()
  target_link_libraries(${name} PRIVATE pugg ${plugin_LIBS})
  set_target_properties(${name} PROPERTIES PREFIX "")
  set_target_properties(${name} PROPERTIES SUFFIX ".plugin")
  target_compile_definitions(${name} PRIVATE PLUGIN_NAME="${name}")
  list(APPEND TARGET_LIST ${name})
endmacro()


# BUILD SETTINGS ###############################################################
if (APPLE)
  set(CMAKE_INSTALL_RPATH "@executable_path/../lib")
  include_directories(/opt/homebrew/include)
  link_directories(/opt/homebrew/lib)
else()
  set(CMAKE_INSTALL_RPATH "\$ORIGIN/../lib;/usr/local/lib")
endif()

# OMZ common source files ######################################################
set(COMMON ${SRC_DIR}/common)

file(GLOB COMMON_SOURCES
  ${COMMON}/models/src/*.cpp
  ${COMMON}/monitors/src/*.cpp
  ${COMMON}/pipelines/src/*.cpp
  ${COMMON}/utils/src/*.cpp
)
file(GLOB COMMON_HEADERS
  ${COMMON}/models/include/models/*.h
  ${COMMON}/monitors/include/monitors/*.h
  ${COMMON}/pipelines/include/pipelines/*.h
  ${COMMON}/utils/include/utils/*.h*
)
# Remove items that depend on gflags (which we don't want)
list(REMOVE_ITEM COMMON_SOURCES ${COMMON}/monitors/src/query_wrapper.cpp)
list(REMOVE_ITEM COMMON_HEADERS ${COMMON}/monitors/src/query_wrapper.h)
list(REMOVE_ITEM COMMON_SOURCES ${COMMON}/utils/src/args_helper.cpp)
list(REMOVE_ITEM COMMON_HEADERS ${COMMON}/utils/include/utils/default_flags.hpp)
# locally modified files
list(APPEND COMMON_SOURCES ${SRC_DIR}/args_helper.cpp)

# Add the include directories ##################################################
include_directories(
  ${COMMON}/models/include
  ${COMMON}/monitors/include
  ${COMMON}/pipelines/include
  ${COMMON}/utils/include
  ${COMMON}/utils/src
  )
  
  
if(WIN32)
  set( CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}" ${CMAKE_MODULE_PATH} )
endif()


# TARGETS ######################################################################
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

add_library(common STATIC ${COMMON_SOURCES} ${COMMON_HEADERS})

if(WIN32)
  find_package(k4a)
  find_package(k4abt)
  find_package(k4arecord)
endif()


if(k4a_FOUND AND k4abt_FOUND AND k4arecord_FOUND AND NOT SKIP_KINECT_AZURE)
  add_plugin(hpe LIBS ${OpenCV_LIBS} ${PCL_LIBRARIES} common openvino::runtime Eigen3::Eigen k4a::k4a k4a::k4abt k4a::k4arecord )
  target_compile_definitions(hpe PRIVATE KINECT_AZURE)
  target_compile_definitions(hpe_main PRIVATE KINECT_AZURE)
else()
  if(WIN32)
    add_plugin(hpe LIBS ${OpenCV_LIBS} ${PCL_LIBRARIES} common openvino::runtime Eigen3::Eigen)
  else()
    add_plugin(hpe LIBS ${OpenCV_LIBS} ${PCL_LIBRARIES} common openvino::runtime Eigen3::Eigen lccv_static ${LIBCAMERA_LINK_LIBRARIES})
  endif()
endif()

# Download OpenPOSE models #####################################################
set(MODEL_NAME "human-pose-estimation-0001" CACHE STRING "Model name (no extension)")
if(NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/models/${MODEL_NAME}.xml)
  message(STATUS "Downloading OpenPOSE model")
  file(DOWNLOAD https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/${MODEL_NAME}/FP32/${MODEL_NAME}.xml ${CMAKE_CURRENT_SOURCE_DIR}/models/${MODEL_NAME}.xml)
  file(DOWNLOAD https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/${MODEL_NAME}/FP32/${MODEL_NAME}.bin ${CMAKE_CURRENT_SOURCE_DIR}/models/${MODEL_NAME}.bin)
endif()

# INSTALL ######################################################################
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set_property(CACHE CMAKE_INSTALL_PREFIX PROPERTY VALUE ${USR_DIR})
endif()
if(APPLE)
  install(TARGETS ${TARGET_LIST}
    BUNDLE DESTINATION bin
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION lib
    ARCHIVE DESTINATION lib
  )
else()
  install(TARGETS ${TARGET_LIST}
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION bin
    ARCHIVE DESTINATION lib
  )
endif()


# DOCUMENTATION ################################################################
include(FindDoxygen)
find_package(Doxygen)
if(DOXYGEN_FOUND)
  if(NOT EXISTS ${CMAKE_CURRENT_LIST_DIR}/doc)
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/doc)
  endif() 
  message(STATUS "Doxygen found, documentation will be built")
  file(GLOB MARKDOWN_FILES "${CMAKE_CURRENT_LIST_DIR}/*.md")
  set(DOXYGEN_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/doc)
  set(DOXYGEN_USE_MDFILE_AS_MAINPAGE ${CMAKE_CURRENT_LIST_DIR}/README.md)
  set(DOXYGEN_EXCLUDE_PATTERNS clock.cpp echo*.cpp twice.cpp webcam.cpp */main/*)
  doxygen_add_docs(Doxygen
    ${SRC_DIR} ${SRC_DIR}/plugin ${MARKDOWN_FILES}
    WORKING_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/doc
    CONFIG_FILE Doxyfile
  )
endif()
